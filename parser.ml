type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | F_IS_POS
  | F_IS_NEG
  | F_IS_ZERO
  | F_ABS
  | F_LESS
  | F_NEG
  | F_SQR
  | F_HALF
  | SQRT
  | FLOOR
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 53 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* AST *);
  264 (* SLASH *);
  265 (* MINUS_DOT *);
  266 (* PLUS_DOT *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* REC *);
  282 (* COMMA *);
  283 (* ARRAY_CREATE *);
  284 (* DOT *);
  285 (* LESS_MINUS *);
  286 (* SEMICOLON *);
  287 (* LPAREN *);
  288 (* RPAREN *);
  289 (* F_IS_POS *);
  290 (* F_IS_NEG *);
  291 (* F_IS_ZERO *);
  292 (* F_ABS *);
  293 (* F_LESS *);
  294 (* F_NEG *);
  295 (* F_SQR *);
  296 (* F_HALF *);
  297 (* SQRT *);
  298 (* FLOOR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\007\000\007\000\004\000\004\000\005\000\005\000\006\000\006\000\
\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\
\003\000\002\000\006\000\002\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\007\000\006\000\005\000\002\000\
\001\000\008\000\007\000\004\000\003\000\003\000\001\000\004\000\
\002\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\047\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\010\000\028\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\022\000\023\000\024\000\
\026\000\000\000\011\000\033\000\034\000\035\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\014\000\
\015\000\000\000\000\000\031\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\056\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\093\000\026\000\071\000\066\000\027\000\073\000\100\000"

let yysindex = "\255\255\
\179\255\000\000\000\000\000\000\000\000\000\000\179\255\179\255\
\179\255\179\255\000\000\006\255\005\255\128\255\179\255\179\255\
\179\255\179\255\005\255\179\255\179\255\179\255\179\255\179\255\
\051\003\012\255\232\254\000\000\000\000\000\000\203\002\247\254\
\239\254\255\254\045\255\000\000\119\002\000\000\000\000\000\000\
\000\000\045\255\000\000\000\000\000\000\000\000\000\000\179\255\
\179\255\179\255\179\255\179\255\179\255\179\255\179\255\179\255\
\179\255\179\255\179\255\179\255\179\255\179\255\179\255\001\255\
\002\255\005\255\179\255\179\255\179\255\016\255\015\255\018\255\
\003\255\010\255\002\255\000\000\002\255\090\255\090\255\000\000\
\000\000\090\255\090\255\000\000\000\000\075\255\075\255\075\255\
\075\255\075\255\075\255\129\003\077\003\179\255\002\255\129\003\
\229\002\255\002\016\255\029\255\179\255\023\255\027\255\055\255\
\179\255\179\255\147\002\179\255\179\255\000\000\179\255\051\003\
\000\000\000\000\179\255\175\002\046\255\228\255\103\003\051\003\
\025\003\000\000\179\255\179\255\179\255\228\255\051\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\093\000\205\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\121\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\149\000\000\000\177\000\037\001\069\001\000\000\
\000\000\112\001\140\001\000\000\000\000\168\001\196\001\224\001\
\251\001\024\002\044\002\084\001\056\001\000\000\065\000\231\001\
\000\000\000\000\064\255\000\000\000\000\000\000\000\000\000\000\
\000\000\232\000\000\000\000\000\000\000\000\000\000\000\066\002\
\000\000\000\000\000\000\000\000\001\000\059\002\081\002\054\255\
\000\000\000\000\000\000\005\001\000\000\064\002\091\002"

let yygindex = "\000\000\
\002\000\053\000\000\000\000\000\000\000\000\000\246\255"

let yytablesize = 1171
let yytable = "\001\000\
\007\000\067\000\025\000\069\000\070\000\004\000\005\000\006\000\
\028\000\029\000\030\000\031\000\004\000\005\000\006\000\037\000\
\038\000\039\000\040\000\041\000\072\000\043\000\044\000\045\000\
\046\000\047\000\011\000\032\000\103\000\074\000\033\000\094\000\
\052\000\011\000\104\000\014\000\034\000\099\000\101\000\064\000\
\105\000\111\000\014\000\102\000\113\000\004\000\005\000\006\000\
\114\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\051\000\035\000\011\000\115\000\096\000\097\000\098\000\042\000\
\074\000\057\000\123\000\014\000\050\000\048\000\065\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\075\000\
\110\000\000\000\000\000\000\000\008\000\000\000\077\000\107\000\
\050\000\051\000\000\000\000\000\054\000\055\000\112\000\000\000\
\000\000\000\000\116\000\000\000\000\000\118\000\119\000\000\000\
\120\000\000\000\000\000\000\000\121\000\000\000\095\000\000\000\
\040\000\000\000\000\000\000\000\126\000\000\000\127\000\003\000\
\004\000\005\000\006\000\007\000\008\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\046\000\011\000\012\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\014\000\036\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\003\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\011\000\012\000\000\000\000\000\041\000\013\000\000\000\000\000\
\000\000\014\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\007\000\007\000\007\000\037\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\007\000\007\000\007\000\000\000\
\007\000\000\000\007\000\000\000\007\000\000\000\007\000\007\000\
\007\000\052\000\052\000\052\000\013\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\000\000\052\000\052\000\052\000\045\000\
\052\000\000\000\052\000\000\000\000\000\000\000\052\000\052\000\
\052\000\051\000\051\000\051\000\012\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\054\000\051\000\051\000\051\000\000\000\
\051\000\000\000\051\000\000\000\000\000\000\000\051\000\051\000\
\051\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\030\000\
\008\000\008\000\000\000\000\000\008\000\000\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\029\000\040\000\040\000\000\000\000\000\
\040\000\000\000\040\000\000\000\000\000\000\000\040\000\000\000\
\040\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\016\000\
\046\000\046\000\000\000\000\000\046\000\000\000\046\000\000\000\
\000\000\000\000\046\000\000\000\046\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\017\000\025\000\025\000\000\000\000\000\
\025\000\000\000\025\000\000\000\000\000\000\000\025\000\000\000\
\025\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\020\000\
\041\000\041\000\000\000\000\000\041\000\000\000\053\000\000\000\
\000\000\000\000\041\000\000\000\041\000\044\000\044\000\044\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\021\000\044\000\044\000\000\000\000\000\044\000\
\000\000\044\000\000\000\000\000\000\000\044\000\000\000\044\000\
\000\000\000\000\037\000\037\000\037\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\018\000\
\037\000\037\000\000\000\000\000\037\000\000\000\037\000\000\000\
\000\000\000\000\037\000\000\000\037\000\000\000\000\000\000\000\
\000\000\013\000\013\000\019\000\000\000\013\000\013\000\000\000\
\000\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\027\000\000\000\013\000\000\000\013\000\043\000\
\000\000\039\000\013\000\000\000\013\000\000\000\000\000\000\000\
\000\000\012\000\012\000\045\000\045\000\012\000\012\000\045\000\
\038\000\012\000\012\000\012\000\012\000\012\000\012\000\045\000\
\012\000\012\000\042\000\000\000\012\000\000\000\012\000\000\000\
\000\000\000\000\012\000\000\000\012\000\000\000\000\000\054\000\
\054\000\000\000\000\000\054\000\000\000\054\000\000\000\000\000\
\000\000\054\000\000\000\054\000\030\000\030\000\000\000\000\000\
\030\000\030\000\000\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\000\000\030\000\030\000\000\000\000\000\030\000\
\000\000\030\000\000\000\000\000\000\000\030\000\000\000\030\000\
\029\000\029\000\000\000\000\000\029\000\029\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\000\000\029\000\
\029\000\000\000\000\000\029\000\000\000\029\000\000\000\000\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\016\000\016\000\000\000\000\000\016\000\
\000\000\016\000\000\000\000\000\000\000\016\000\000\000\016\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\017\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\000\000\020\000\020\000\000\000\000\000\020\000\
\000\000\020\000\053\000\053\000\000\000\020\000\053\000\020\000\
\053\000\000\000\000\000\000\000\053\000\000\000\053\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\021\000\
\000\000\000\000\021\000\000\000\021\000\000\000\000\000\000\000\
\021\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\018\000\018\000\000\000\000\000\018\000\
\000\000\018\000\000\000\000\000\000\000\018\000\000\000\018\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\019\000\
\019\000\000\000\000\000\019\000\000\000\019\000\000\000\000\000\
\000\000\019\000\000\000\019\000\000\000\000\000\027\000\027\000\
\000\000\000\000\027\000\043\000\043\000\039\000\039\000\043\000\
\027\000\039\000\027\000\000\000\000\000\043\000\000\000\043\000\
\000\000\039\000\000\000\000\000\038\000\038\000\000\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\042\000\042\000\
\038\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\000\000\000\000\063\000\000\000\076\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\000\000\
\063\000\000\000\117\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\000\000\000\000\063\000\000\000\122\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\000\000\
\063\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\000\000\
\000\000\108\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\063\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\109\000\000\000\
\062\000\000\000\000\000\000\000\063\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\000\000\000\000\000\000\000\000\000\000\
\125\000\000\000\062\000\000\000\000\000\000\000\063\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\000\000\
\063\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\106\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\000\000\000\000\124\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000"

let yycheck = "\001\000\
\000\000\026\001\001\000\013\001\022\001\001\001\002\001\003\001\
\007\000\008\000\009\000\010\000\001\001\002\001\003\001\014\000\
\015\000\016\000\017\000\018\000\022\001\020\000\021\000\022\000\
\023\000\024\000\022\001\022\001\026\001\028\001\025\001\031\001\
\000\000\022\001\032\001\031\001\031\001\022\001\024\001\028\001\
\031\001\013\001\031\001\026\001\022\001\001\001\002\001\003\001\
\022\001\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\000\000\013\000\022\001\013\001\067\000\068\000\069\000\019\000\
\028\001\000\000\029\001\031\001\013\001\024\001\026\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\035\000\
\099\000\255\255\255\255\255\255\000\000\255\255\042\000\094\000\
\007\001\008\001\255\255\255\255\011\001\012\001\101\000\255\255\
\255\255\255\255\105\000\255\255\255\255\108\000\109\000\255\255\
\111\000\255\255\255\255\255\255\115\000\255\255\066\000\255\255\
\000\000\255\255\255\255\255\255\123\000\255\255\125\000\000\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\000\000\022\001\023\001\255\255\
\255\255\255\255\027\001\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\000\000\027\001\255\255\255\255\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\000\000\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\000\000\255\255\
\255\255\255\255\030\001\255\255\032\001\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\005\001\006\001\000\000\255\255\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\000\000\255\255\024\001\255\255\026\001\000\000\
\255\255\000\000\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\005\001\006\001\020\001\021\001\009\001\010\001\024\001\
\000\000\013\001\014\001\015\001\016\001\017\001\018\001\032\001\
\020\001\021\001\000\000\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\005\001\006\001\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\005\001\006\001\255\255\255\255\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\020\001\021\001\255\255\030\001\024\001\032\001\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\030\001\255\255\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\020\001\021\001\
\255\255\255\255\024\001\020\001\021\001\020\001\021\001\024\001\
\030\001\024\001\032\001\255\255\255\255\030\001\255\255\032\001\
\255\255\032\001\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\032\001\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\255\255\
\030\001\255\255\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\255\255\
\030\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\030\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\255\255\
\030\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\030\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  F_IS_POS\000\
  F_IS_NEG\000\
  F_IS_ZERO\000\
  F_ABS\000\
  F_LESS\000\
  F_NEG\000\
  F_SQR\000\
  F_HALF\000\
  SQRT\000\
  FLOOR\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 78 "parser.mly"
    ( _2 )
# 538 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
    ( Unit((Parsing.symbol_start_pos ()).pos_lnum) )
# 544 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 82 "parser.mly"
    ( Bool(_1, ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 551 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 84 "parser.mly"
    ( Int(_1, ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 558 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 86 "parser.mly"
    ( Float(_1, ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 565 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 88 "parser.mly"
    ( Var(_1, ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 572 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
    ( Get(_1, _4, ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 580 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 94 "parser.mly"
    ( _1 )
# 587 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
    ( Not(_2, ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 594 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float((-.f), p) (* -1.23などは型エラーではないので別扱い *)
    | e -> (Neg(e, (Parsing.symbol_start_pos ()).pos_lnum)) )
# 603 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( FMul(Float(-1.0, (Parsing.symbol_start_pos ()).pos_lnum), _2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 610 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( Add(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 618 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Sub(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 626 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( App(Var("mul_exp2", (Parsing.symbol_start_pos ()).pos_lnum), [_1;_3], (Parsing.symbol_start_pos ()).pos_lnum) )
# 634 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( App(Var("div_exp2", (Parsing.symbol_start_pos ()).pos_lnum), [_1;_3], (Parsing.symbol_start_pos ()).pos_lnum) )
# 642 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( Eq(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 650 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( Not(Eq(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 658 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( Not(LE(_3, _1, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 666 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( Not(LE(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 674 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 125 "parser.mly"
    ( LE(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 682 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( LE(_3, _1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 690 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( Not(LE(_2, Float(0.0, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 697 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( Not(LE(Float(0.0, (Parsing.symbol_start_pos ()).pos_lnum), _2, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 704 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( Eq(_2, Float(0.0, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 711 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 136 "parser.mly"
    ( Not(LE(_3, _2, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 719 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( If(LE(_2, Float(0.0, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum),
    FMul(Float(-1.0, (Parsing.symbol_start_pos ()).pos_lnum), _2, (Parsing.symbol_start_pos ()).pos_lnum), 
    _2,
    (Parsing.symbol_start_pos ()).pos_lnum) )
# 729 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 146 "parser.mly"
    ( If(_2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 738 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 149 "parser.mly"
    ( FNeg(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 745 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( FAdd(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 753 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 153 "parser.mly"
    ( FSub(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 761 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 155 "parser.mly"
    ( FMul(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 769 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 157 "parser.mly"
    ( FDiv(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 777 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 160 "parser.mly"
    ( FMul(_2, _2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 784 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 162 "parser.mly"
    ( FDiv(_2, Float(2.0, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 791 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 164 "parser.mly"
    ( FSqrt(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 798 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 166 "parser.mly"
    ( Floor(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 805 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 169 "parser.mly"
    ( Let(addtyp _2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 814 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 172 "parser.mly"
    ( Let(addtyp _2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 823 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 175 "parser.mly"
    ( LetRec(_3, _5, (Parsing.symbol_start_pos ()).pos_lnum) )
# 831 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 178 "parser.mly"
    ( App(_1, _2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 839 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 181 "parser.mly"
    ( Tuple(_1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 846 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 183 "parser.mly"
    ( LetTuple(_3, _6, _8, (Parsing.symbol_start_pos ()).pos_lnum) )
# 855 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 185 "parser.mly"
    ( Put(_1, _4, _7, (Parsing.symbol_start_pos ()).pos_lnum) )
# 864 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 187 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 872 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 189 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 880 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 192 "parser.mly"
    ( Array(_2, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 888 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near characters %d-%d in line %d-%d"
           (Parsing.symbol_start ())
           (Parsing.symbol_end ())
           ((Parsing.symbol_start_pos ()).pos_lnum)
           ((Parsing.symbol_end_pos ()).pos_lnum)) )
# 899 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 203 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 908 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 207 "parser.mly"
    ( addtyp _1 :: _2 )
# 916 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 209 "parser.mly"
    ( [addtyp _1] )
# 923 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 214 "parser.mly"
    ( _1 @ [_2] )
# 931 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 217 "parser.mly"
    ( [_1] )
# 938 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 221 "parser.mly"
    ( _1 @ [_3] )
# 946 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 223 "parser.mly"
    ( [_1; _3] )
# 954 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 227 "parser.mly"
    ( _1 @ [addtyp _3] )
# 962 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 229 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 970 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
